/**
!function(t,e,r,s,n,a,o,l,c){t.rstat4||(o=t.rstat4=function(){var t=Array.prototype.slice.call(arguments);return t.length&&"configure"===t[0]&&o._a(Object(t[1])),o.doCall?o.doCall.call(o,t):o._q.push(t)&&0},o.push=o,o._sv="4.1.0",o._q=[],o._jsl=function(t){(l=e.createElement(r)).async=!0,l.src=t,(c=e.getElementsByTagName(r)[0]).parentNode.insertBefore(l,c)},o._a=function(t){o._host=t.server,o._prefix=t.pathPrefix||"",o._host&&o._jsl("https://"+o._host+o._prefix+"/lib.js")})}(window,document,"script")
rstat4._jsl("https://"+document.location.hostname+"/an/public/mb_prod.js") 
 */

window.dataLayer = window.dataLayer || [];

!function (w, d, st, cn, hs, lj, rst, se, he) {
  if (w.rstat4) return; rst = w.rstat4 = function () {
    var a = Array.prototype.slice.call(arguments);
    a.length && a[0] === cn && rst._a(Object(a[1]));
    return rst.doCall ? rst.doCall.call(rst, a) : rst._q.push(a) && 0;
  };
  rst.push = rst; rst._sv = '4.1.0'; rst._q = [];
  rst._jsl = function (src) {
    se = d.createElement(st); se.async = !0; se.src = src;
    he = d.getElementsByTagName(st)[0]; he.parentNode.insertBefore(se, he);
  };
  rst._a = function (conf) {
    rst._host = conf.server; rst._prefix = conf.pathPrefix || '';
    rst._host && rst._jsl(hs + rst._host + rst._prefix + lj);
  }
}(window, document, 'script', 'configure', 'https://', '/lib.js');


var rstat4_target_domain = document.location.hostname;
var rstat4_target_base_url = '/an';
var rstat4_target_project_id = 1;

if (window['_rstat_is_dev']) {
  // window._rst4_logger = true;
  rstat4_target_base_url = '';
  rstat4_target_domain = 'nullapp.org';
  rstat4_target_project_id = 999001;
}


try {
  rstat4('configure', {
    server: rstat4_target_domain,
    projectId: rstat4_target_project_id,
    trackClicks: { allClicks: 1 },
    allowHTTP: 1,
    pathPrefix: rstat4_target_base_url,
  });

  rstat4('page');
} catch (e) {
  console && console.warn && console.warn('rstat error', e)
}


try {
  (function () {
    var script = document.createElement('script');
    script.src = 'https://' + rstat4_target_domain + rstat4_target_base_url + '/public/wv.js';
    script.onload = function () {
      // When loading `web-vitals` using a classic script, all the public
      // methods can be found on the `webVitals` global namespace.
      // 'vitals_cls', 'vitals_inp', 'vitals_lcp'
      webVitals.onTTFB(x => rstat4('event', 'vitals', x));
      webVitals.onCLS(x => rstat4('event', 'vitals', x));
      webVitals.onINP(x => rstat4('event', 'vitals', x));
      webVitals.onLCP(x => rstat4('event', 'vitals', x));
      webVitals.onFCP(x => rstat4('event', 'vitals', x));
    };
    document.head.appendChild(script);
  })();
} catch (e) {
  console.log(e);
}






var _rstat_start_hotjar_done = false;
var _rstat_start_hotjar_div = 100;

function _rstat_load_img(imgUrl) {
  var _img = window.Image ? (new Image(1, 1)) : documet.createElement('img');
  _img.src = imgUrl;
}


function _rstat_start_hotjar(data) {

  return;

  if (_rstat_start_hotjar_done) {
    return;
  }

  if (!performance || !performance.now) {
    return;
  }

  if (Math.round(performance.now()) % _rstat_start_hotjar_div !== 0) {
    return;
  }



  _rstat_start_hotjar_done = true;


  try {

    // if (performance && performance.now && Math.round(performance.now()) % 100 === 0) {
    rstat4('event', 'openreplay_start_s');

    var initOpts = {
      projectKey: "MNHayhCwcocbeE3U2HyA",
      ingestPoint: "https://openreplay.lana.team/ingest",
      defaultInputMode: 1,
      obscureTextNumbers: false,
      obscureTextEmails: true,
    };
    var startOpts = { userID: "" };
    (function (A, s, a, y, e, r) {
      r = window.OpenReplay = [e, r, y, [s - 1, e]];
      s = document.createElement('script'); s.src = A; s.async = !a;
      document.getElementsByTagName('head')[0].appendChild(s);
      r.start = function (v) { r.push([0]) };
      r.stop = function (v) { r.push([1]) };
      r.setUserID = function (id) { r.push([2, id]) };
      r.setUserAnonymousID = function (id) { r.push([3, id]) };
      r.setMetadata = function (k, v) { r.push([4, k, v]) };
      r.event = function (k, p, i) { r.push([5, k, p, i]) };
      r.issue = function (k, p) { r.push([6, k, p]) };
      r.isActive = function () { return false };
      r.getSessionToken = function () { };
      // r.setUserAnonymousID(rstat4('getUid'));
    })("//static.openreplay.com/15.0.0/openreplay.js", 1, 0, initOpts, startOpts);

    // }
  } catch (e) {
    console.warn(e);
  }


  // try {

  //   data = data || {};

  // if (_rstat_start_hotjar_done) {
  //   return;
  // }
  //   _rstat_start_hotjar_done = true;

  //   (function (h, o, t, j, a, r) {
  //     h.hj = h.hj || function () { (h.hj.q = h.hj.q || []).push(arguments) };
  //     h._hjSettings = { hjid: 5120880, hjsv: 6 };
  //     a = o.getElementsByTagName('head')[0];
  //     r = o.createElement('script'); r.async = 1;
  //     r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
  //     a.appendChild(r);

  //     h.hj('identify', (data.user_id || ''), {
  //       'Uid': rstat4('getUid'),
  //       'Currency': window['_site_params']['currency']
  //     });
  //   })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');
  // } catch (e) {
  //   console.warn(e);
  // }
}



function _rstat_sync_ulid() {

  try {
    fetch('https://' + rstat4_target_domain + '/an/ulid', {
      method: 'GET'
    })
      .then(function (r) {
        return r.json()
      })
      .then(function (r) {
        if (r && r['user_key']) {
          const server_ulid = r['user_key'];
          // 
          const ulids = [server_ulid];
          const ls_ulid = localStorage.getItem('rst_ulid');
          if (ls_ulid) {
            ulids.push(ls_ulid)
          }
          ulids.sort()
          localStorage.setItem('rst_ulid', ulids[0])

          rstat4('identify', {
            rstat_user_key: ulids[0]
          });
        }
      })
      .catch(function (e) {
        console && console.warn && console.warn('Fetch ulid error', e)
      });
  } catch (e) { }
}

rstat4('onEvent', function (name, data) {

  if (name != 'identify') {
    var ev = { 'event': 'rst_event', 'event_name': name };
    if (data.user_id) {
      ev.user_id = data.user_id;
    }
    ev['amount'] = data['amount'];
    if (window['_site_params']) {
      ev['currency'] = window['_site_params']['currency'];
    }


    dataLayer.push(ev);
    try {
      if (window['_site_params'] && window['_site_params']['user_id']) {
        if (window['OpenReplay'] && window['OpenReplay']['setUserID']) {
          window['OpenReplay'].setUserID(window['_site_params']['user_id']);
        }

      }
    } catch (e) {
      console.warn(e);
    }

  }

  try {

    if (name === 'registration_success' || name === 'regPopupForm_success') {
      if (data.user_id) {
        rstat4('identify', data.user_id);
      }
    }

    if (document.location.hostname === 'mostbet.com.mx') {
      // _rstat_start_hotjar_div = 5;
      // _rstat_start_hotjar(data);
    }
    else {
      _rstat_start_hotjar(data);
    }



    // if (window['_site_params']) {
    //   // if (window['_site_params']['currency'] === 'MXN') {
    //   if (window['_site_params']['currency'] === 'TRY') {
    //     _rstat_start_hotjar(data);
    //     // rstat4('event', 'hotjar_start_mxn');
    //   }
    //   if (window['_site_params']['currency'] === 'EGP') {
    //     _rstat_start_hotjar(data);
    //     // rstat4('event', 'hotjar_start_mxn');
    //   }
    // }

    // if (name === 'page' && document.location.pathname == "/profile/payout" && window['_site_params']) {
    //   if (window['_site_params']['currency'] === 'AZN') {
    //     _rstat_start_hotjar(data);
    //     // rstat4('event', 'hotjar_start_azn');
    //   }
    // }

  } catch (e) {
    console.warn(e)
  }
});




rstat4('onReady', function () {

  rstat4('identify', { 'nd': 0 });

  var checker = function () {
    try {
      // Initialize the agent at application startup.
      const bdp = import('https://' + document.location.hostname + '/an/public/bd.js').then((bd) => bd.load())
      // Get detection results when you need them.
      bdp
        .then((b) => b.detect())
        .then((result) => {
          rstat4('event', 'container_bd_handled', result);
          rstat4('identify', { "bd": result["bot"], "bdk": result["botKind"] });
        })
        .catch(e => {
          rstat4('event', 'container_bd_error', { msg: String(e) });
          console && console.error(e);
        });
    } catch (e) {
      rstat4('event', 'container_bd_error', { msg: String(e) });
      console && console.error(e);
    }
  };
  setTimeout(checker, 10000);

  setTimeout(function () {
    try {
      rstat4('identify', {
        'deviceTrId': localStorage.getItem("deviceTrId")
      });
    } catch (e) {
      console.error(e);
      rstat4('event', 'container_ls_get_error', { msg: String(e) });
    }
  }, 5000)


  var loader_func = function () {
    rstat4('event', 'ping38');
  }
  setTimeout(loader_func, 10000);
  setInterval(loader_func, 60000);


  setTimeout(_rstat_sync_ulid, 500);
  setInterval(_rstat_sync_ulid, 10000);

  var _rstat_uid = rstat4('getUid');
  _rstat_load_img('https://x011bt.com/gif/s2/' + rstat4_target_project_id + '?own_uid=' + _rstat_uid)

});



